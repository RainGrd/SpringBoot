Springboot30StartupApplication [10] -> SpringApplication.run(Springboot30StartupApplication.class, args);
    SpringApplication【1294】 -> return run(new Class<?>[] { primarySource }, args);
        SpringApplication【1306】 -> return new SpringApplication(primarySources).run(args);
        #加载各种配置信息，初始化各种配置对象
        SpringApplication【1306】 -> SpringApplication(primarySources)
            SpringApplication【246】 -> this(null, primarySources);
                SpringApplication【260】 -> this(null, primarySources);
                    # 初始化资源加载器
                    SpringApplication【261】 -> this.resourceLoader = resourceLoader;
                    # 初始化配置类的类名信息(格式转换)
                    SpringApplication【263】 -> this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
                    # 确认当前容器的类型
                    SpringApplication【264】 -> this.webApplicationType = WebApplicationType.deduceFromClasspath();
                    # 获取系统配置引导信息
                    SpringApplication【265】 -> this.bootstrapRegistryInitializers = new ArrayList<>(
                    		getSpringFactoriesInstances(BootstrapRegistryInitializer.class));
                    # 获取ApplicationContextInitializer.class对应的实例
                    SpringApplication【267】 -> setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
                    # 初始化监听器，对初始化过程及运行过程进行干预
                    SpringApplication【268】 -> setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
                    # 初始化了引导类类名信息，备用
                    SpringApplication【269】 -> this.mainApplicationClass = deduceMainApplicationClass();

        SpringApplication【1306】 -> new SpringApplication(primarySources).run(args);
        # 初始化容器
                    SpringApplication【294】 -> long startTime = System.nanoTime();
                    # 设置容器创建时间，设置计时器
            		SpringApplication【295】 -> DefaultBootstrapContext bootstrapContext = createBootstrapContext();
            		# 系统引导信息对应的上下文对象
            		SpringApplication【296】 -> ConfigurableApplicationContext context = null;
            		# 创建上下文对象
            		SpringApplication【297】 -> configureHeadlessProperty();
            		# 模拟输入输出信号，避免出现因缺少外设导致的信号传输失败，进而引发错误(模拟显示器，键盘，鼠标...)
            		SpringApplication【298】 -> SpringApplicationRunListeners listeners = getRunListeners(args);
            		# 获取当前注册的所有可运行的监听器
            		SpringApplication【299】 -> listeners.starting(bootstrapContext, this.mainApplicationClass);
            		# 监听器执行了对应的操作步骤
            		SpringApplication【301】 -> ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
            		SpringApplication【302】 -> ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);
            		# 将前期读取的数据加载成了一个环境对象，用来描述信息
            		SpringApplication【303】 -> configureIgnoreBeanInfo(environment);
            		# 做了一个配置，备用
            		SpringApplication【304】 -> Banner printedBanner = printBanner(environment);
            		# 初始化启动图标
            		SpringApplication【305】 -> context = createApplicationContext();
            		# 创建容器对象，根据前期配置的容器类型进行判定并创建
            		SpringApplication【306】 -> context.setApplicationStartup(this.applicationStartup);
            		# 设置启动模式
            		SpringApplication【307】 -> prepareContext(bootstrapContext, context, environment, listeners, applicationArguments,printedBanner);
            		# 对容器进行设置，参数来自前期的设置
            		SpringApplication【308】 -> refreshContext(context);
            		# 刷新容器环境
            		SpringApplication【309】 -> afterRefresh(context, applicationArguments);
            		# 刷新容器环境完毕后做的后处理
            		SpringApplication【310】 -> Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);
            		# 计时结束
            		SpringApplication【311】 -> if (this.logStartupInfo) {
            		# 判定是否记录启动时间的日志
            		SpringApplication【312】 -> 	new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);
            		# 创建日志对应的对象，输出日志，包含启动时间
            		SpringApplication【314】 -> listeners.started(context, timeTakenToStartup);
            		# 监听器执行了对应的操作步骤
            		SpringApplication【315】 -> callRunners(context, applicationArguments);
            		SpringApplication【322】 -> Duration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);
            		SpringApplication【323】 -> listeners.ready(context, timeTakenToReady);
            		# 监听器执行了对应的操作步骤

